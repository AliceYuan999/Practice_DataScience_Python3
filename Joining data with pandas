Python Learning Blog:

4. Joining Data with pandas
Contents:
1. Data merging basics
    1. Inner join
    2. One-to-many relationships
    3. Merging multiple DataFrames
2. Merging table with different join types
    1. Left join
    2. Other joins
    3. Merging a table to itself
    4. Merging on indexes
3. Advanced merging and concatenating 
    1. Filtering joins
    2. Concatenate DataFrames together vertically
    3. Verifying integrity
4. Merging ordered and time-series data
    1. Using merge_ordered()
    2. Using merge_asof()
    3. Selecting data with .query()
    4. Reshaping data with .melt()


Chapter 1: Data merging basics
    1. Inner join: .merge() which only returns rows where the values match in both tables.
        * Example 
			words = pd.read_csv(“words.csv”)
			census = pd.read_csv(“census.csv”)
			# since both wards and census have the index ‘ward’, then we merge these two files on ‘ward’
			wards_census = wards.merge(census, on=‘ward’, suffixes = (‘_ward’, ‘_cen’))
			print(wards_census.head(4))

    2. One-to-many relationships:   .merge() with a one-to-many relationship, a row in the left table may be repeated if it is related to multiple rows in the right table. 
        * exmaple: 
			licenses_owners = licenses.merge(biz_owners, on="account")
			grants.merge(licenses, on=[‘address’, ‘zip’])

    3. Merging multiple DataFrames: 
        * Three tables: 
            * df1.merge(df2, on=‘col’)\
		.merge(dfs, on=‘col’)
        * Four tables:
            * fd1.merge(df2, on=‘col’)\
		.merge(df3, on=’col’)\
		.merge(df4, on=‘col’)
        * Example :
		land_cen_lic = land_use.merge(census, on='ward') \
                    						.merge(licenses, on='ward', suffixes=('_cen','_lic'))


Chapter 2: Merging table with different join types
    1. Left join:  only rows from the right table matches left table will be returned.
        1. Example 
			df1.merge(df2, on=‘col’, how=‘left’)

    2. Other joins:  
        1.  Right joining: only rows from the left table matches right table will be returned.
            1. Example : tv_movies = movies.merge(tv_genre, how=‘right’, left_on=‘id’, right_on=‘movie_id’)
        2. Outer joining: will return all of the rows from both tables regardless if there is a match between the tables.
            1. Example: family.merge(comedy, on=‘movie_id’, how=‘outer’, suffixes=(‘_fam’, ‘_com’))

    3. Merging a table to itself:   Merging a table to itself can be useful when you want to compare values in a column to other values in the same column.
            1. example: or_se=se.merge(se, left_on=‘sequel’, right_on=‘id’, suffixes=(‘_org’, ‘_seq’))

    4. Merging on indexes:  both tables must match in each table to be returned in the result 
        1. example: 
		movies=pd.read_csv(’xxx.csv’, index_col=[‘id’])
		movi_tag=movies.merge(taglines, on=‘id’, how=‘left’)
        2. Multiindex merge:
		sa_ca=samuel.merge(casts, on=[‘movie_if’, ‘cast_id’])
        3. Index merge with left_on and right_on
	movies_genres=movies.merge(movie_to_genres, left_on=‘id’, left_index=True, right_on=‘movie_id’, right_index=True)

Chapter 3: Advanced merging and concatenating 
    1. Filtering joins:  Filter observations from table based on whether or not they match an observation in another table
        1. Semi join: returns the intersection, similar to an inner join; returns only columns form the left table and not the right; no duplicates.
            1. Example: 
		genres_tracks = genres.merge(top_tracks, on = ‘gid’)
		top_genres = genres[genres[‘gid’].isin(genres_tracks[‘gid’])]
        2.  Anti join: returns the left table, excluding the intersection; returns only columns from the left table and not the right.
            1. Example:
		genres_tracks = genres.merge(top_tracks, on = ‘gid’, how = ‘left’, indicator = True)
		gid_list = genres_tracks.log[genres_tracks[‘_merge’] == ‘left_only’, ‘gid’]
		non_top_genres = genres[genres[‘gid’].isin(gid_list)]

    2. Concatenate DataFrames together vertically:  pandas .concat() method can concatenate both vertical and horizontal (axis=0, vertical). # axis=0 is default 
        1. Example: 
		# the index dose not have value, we can ignore it by calling ignore_index=True.
		pd.concat([df1, df2, df3], ignore_index=True)
		# we can provide a list of labels  calling keys argument
		pd.concat([df1, df2, df3], ignore_index= False, keys=[‘xx1’, ‘xx2’, ‘xx3’])
		# if we need to combine tables with different columns names, we can call sort method
		pd.concat([df1, df2, df3], sort=True)
		# if we only want columns the tables have in common, calling  join=‘inner’.
		pd.concat([df1, df2, df3], join=‘inner’)
	
	.append() is a simplified version of the .concat() method, which supports ignore_index and sort method but dose not support keys and always join=‘outer’.
		# .append() is a DataFrame method therefore, we list a df table first and then call the method.
		df1.append([df2, df3], ignore_index=True, sort = True)

    3. Verifying integrity:  .merge(validate=None), to check if merge is of specified type: ‘one_to_one’, ‘one_to_many’, ‘many_to_one’, ‘many_to_many’
        1. Example:
Df1.merge(df2, on=‘xx’, validate=‘one_to_one’)
        # to check whether the new concatenated index contains duplicates
        .contact(verify_integrity=False). # default value is False
      2.Example: pd.contact([pd1, pd2], verify_integrity=True)






